generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
  COMMON
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  cpf            String     @unique @db.VarChar(14)
  username       String     @unique @db.VarChar(100)
  passwordHash   String     @map("password_hash") @db.VarChar(255)
  fileName       String?    @map("file_name") @db.VarChar(255)
  fullName       String?    @map("full_name") @db.VarChar(255)
  role           Role     @default(COMMON)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt      @map("updated_at")
  isActive       Boolean    @default(true)  @map("is_active")
  lastLogin      DateTime?  @map("last_login")

  createdKnowledges Knowledge[] @relation("knowledge_createdBy")
  approvedKnowledges Knowledge[] @relation("knowledge_approvedBy")
  deniedKnowledges   Knowledge[] @relation("knowledge_deniedBy")
  sessions           Session[]
  comments Comment[]

  @@map("users")
}

model Session {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  token          String    @unique @db.VarChar(512)
  ipAddress      String?   @map("ip_address") @db.VarChar(45)
  userAgent      String?   @map("user_agent") @db.VarChar(255)
  createdAt      DateTime  @default(now()) @map("created_at")
  expiresAt      DateTime  @map("expires_at")
  revokedAt      DateTime? @map("revoked_at")
  isActive       Boolean   @default(true) @map("is_active")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Status {
  PENDING
  APPROVED
  DENIED
}

model Knowledge {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  solution      String       @db.Text
  createdById   Int          @map("created_by")
  approvedById  Int?         @map("approved_by")
  deniedById    Int?         @map("denied_by")
  status        Status       @default(PENDING)
  observation   String?
  tags          String?
  views         Int          @default(0)
  isAnalysis    Boolean      @default(false) @map("is_analysis")
  isActive      Boolean      @default(true)  @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt      @map("updated_at")
  approvedAt    DateTime?    @map("approved_at")
  deniedAt      DateTime?    @map("denied_at")

  stockHistories StockHistory[]

  createdBy  User @relation("knowledge_createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  approvedBy User? @relation("knowledge_approvedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  deniedBy   User? @relation("knowledge_deniedBy", fields: [deniedById], references: [id], onDelete: SetNull)
  comments Comment[]

  @@map("knowledge")
}

model StockHistory {
  id           Int       @id @default(autoincrement())
  action       String    @db.VarChar(100)
  dateAt       DateTime  @default(now()) @map("date_at")
  status       Status?
  knowledgeId  Int       @map("knowledge_id")

  knowledge Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@map("stock_history")
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  userId      Int      @map("user_id")
  knowledgeId Int      @map("knowledge_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt      @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  knowledge Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@map("comments")
}
